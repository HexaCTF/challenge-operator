# ChallengeDefinition
apiVersion: apps.hexactf.io/v1alpha1
kind: ChallengeDefinition
metadata:
  name: web-basic
  namespace: default
spec:
  isOne: false
  components:
    - name: web
      deployment:
        spec:
          replicas: 1
          template:
            spec:
              nodeSelector:
                hexact/env: prod
              containers:
                - name: nginx
                  image: nginx:1.25
                  ports:
                    - containerPort: 80
                  command: ["/bin/bash", "-c"]
                  args:
                    - |
                      cat > /etc/nginx/conf.d/default.conf << 'EOF'
                      server {
                          listen 80;
                          server_name _;
                          
                          location / {
                              root /usr/share/nginx/html;
                              index index.html;
                          }
                          
                          location /api/ {
                              proxy_pass http://localhost:5000;
                              proxy_set_header Host $host;
                              proxy_set_header X-Real-IP $remote_addr;
                          }
                      }
                      EOF

                      cat > /usr/share/nginx/html/index.html << 'EOF'
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <title>Sample Challenge</title>
                          <style>
                              body {
                                  font-family: Arial, sans-serif;
                                  max-width: 800px;
                                  margin: 0 auto;
                                  padding: 20px;
                                  text-align: center;
                              }
                              .button {
                                  background: #4CAF50;
                                  color: white;
                                  border: none;
                                  padding: 10px 20px;
                                  border-radius: 5px;
                                  cursor: pointer;
                                  font-size: 16px;
                                  margin: 10px;
                              }
                              .button:hover {
                                  background: #45a049;
                              }
                              #response {
                                  margin-top: 20px;
                                  padding: 15px;
                                  border-radius: 5px;
                                  display: none;
                              }
                              .success {
                                  background: #dff0d8;
                                  border: 1px solid #d6e9c6;
                                  color: #3c763d;
                                  display: block !important;
                              }
                              .error {
                                  background: #f2dede;
                                  border: 1px solid #ebccd1;
                                  color: #a94442;
                                  display: block !important;
                              }
                          </style>
                      </head>
                      <body>
                          <h1>Sample Challenge</h1>
                          <p>Click the button to send request to Python server</p>
                          <button class="button" onclick="sendRequest()">Send Request</button>
                          <div id="response"></div>

                          <script>
                              function sendRequest() {
                                  const responseDiv = document.getElementById('response');
                                  responseDiv.style.display = 'block';
                                  responseDiv.textContent = 'Sending request...';
                                  responseDiv.className = '';

                                  fetch('/api/check')
                                      .then(response => response.json())
                                      .then(data => {
                                          responseDiv.textContent = 'Server Response: ' + data.message;
                                          responseDiv.className = 'success';
                                      })
                                      .catch(error => {
                                          responseDiv.textContent = 'Error: ' + error.message;
                                          responseDiv.className = 'error';
                                      });
                              }
                          </script>
                      </body>
                      </html>
                      EOF

                      nginx -g 'daemon off;'
                  resources:
                    limits:
                      cpu: "200m"
                      memory: "256Mi"
                    requests:
                      cpu: "100m"
                      memory: "128Mi"

                - name: python
                  image: python:3.9-slim
                  ports:
                    - containerPort: 5000
                  command: ["/bin/bash", "-c"]
                  args:
                    - |
                      pip install flask gunicorn
                      
                      cat > app.py << 'EOF'
                      from flask import Flask, jsonify
                      
                      app = Flask(__name__)
                      
                      @app.route('/api/check')
                      def check():
                          return jsonify({
                              "message": "Hello from Python backend!",
                              "status": "success"
                          })
                      
                      if __name__ == '__main__':
                          app.run(host='0.0.0.0', port=5000)
                      EOF
                      
                      gunicorn --bind 0.0.0.0:5000 app:app
                  resources:
                    limits:
                      cpu: "300m"
                      memory: "256Mi"
                    requests:
                      cpu: "100m"
                      memory: "128Mi"
      service:
        spec:
          ports:
            - name: http
              port: 80
              targetPort: 80
              protocol: TCP
          type: NodePort
